/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package juego;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;

/**
 *
 * @author Álvaro
 */
public class LateralFrame extends javax.swing.JFrame implements MouseListener{
    
    private final Border bordeNormal = null;
    private final Border bordeEnemigo = BorderFactory.createLineBorder(Color.RED,2);
    private final Border bordeSelec = BorderFactory.createLineBorder(Color.BLUE,2);
    private final Border bordeMovimiento = BorderFactory.createLineBorder(Color.GREEN,2);
    private final Border bordeRaton = BorderFactory.createLineBorder(Color.CYAN,2);
    
    // QUITAR DESPUES
    int contador;
    int cuentaUnidad = 0;
    private Unidad unidadTemp;
    // QUITAR DESPUES
    
    private TableroFrame tablero;
    private Celda[][] celdas;
    
    private Jugador j1;
    private Jugador j2;
    private Celda celdaSeleccionada;
    private Partida partida;
    
    /**
     * Creates new form LateralFrame
     */
    public LateralFrame() {
        initComponents();
        j1 = new Jugador("Jugador1",1);
        j2 = new Jugador("Jugador2",2);
        partida = new Partida(j1,j2);
        nuevoTurno();
        this.getContentPane().setBackground( new Color(200,200,255) );
        tablero = Juego.tableroF;
        this.setLocation(5, 5);
    }

    private void nuevoTurno() {
        partida.nuevoTurno();
        txtArea.append("Turno: "+partida.getContTurnos()+" ("+partida.getTurnoNombre()+")"+"\n");
    }
    
    public void tableroCerrando(){
        this.btnTablero.setSelected(false);
    }
    
    public void buscaMovimientos(int desplazamiento, Celda celda){
        contador = 0;
        buscador(desplazamiento, celda, null);
        //buscador(desplazamiento, celda, false);
       // System.out.println(contador);
        //celdaComprobada = null;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnTablero = new javax.swing.JToggleButton();
        cBoxSize = new javax.swing.JComboBox<>();
        btnFigura = new javax.swing.JToggleButton();
        btnFigura2 = new javax.swing.JToggleButton();
        txtHeridas = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        labelNombre = new javax.swing.JLabel();
        labelHeridas = new javax.swing.JLabel();
        labelImagen = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ponme un nombre");

        btnTablero.setText("Tablero");
        btnTablero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTableroActionPerformed(evt);
            }
        });

        cBoxSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Grande", "Mediano", "Pequeño" }));
        cBoxSize.setSelectedIndex(1);
        cBoxSize.setToolTipText("");
        cBoxSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBoxSizeActionPerformed(evt);
            }
        });

        btnFigura.setText("Test FIGURA");
        btnFigura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiguraActionPerformed(evt);
            }
        });

        btnFigura2.setText("Test FIGURA2");
        btnFigura2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFigura2ActionPerformed(evt);
            }
        });

        txtHeridas.setEditable(false);
        txtHeridas.setFocusable(false);
        txtHeridas.setRequestFocusEnabled(false);

        txtNombre.setEditable(false);
        txtNombre.setFocusable(false);
        txtNombre.setRequestFocusEnabled(false);

        labelNombre.setText("Nombre");

        labelHeridas.setText("Heridas");

        labelImagen.setBackground(new java.awt.Color(255, 255, 255));
        labelImagen.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        labelImagen.setFocusable(false);
        labelImagen.setOpaque(true);

        txtArea.setColumns(20);
        txtArea.setRows(5);
        txtArea.setFocusable(false);
        jScrollPane1.setViewportView(txtArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelNombre)
                        .addGap(18, 18, 18)
                        .addComponent(txtNombre))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelHeridas)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnFigura2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnTablero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(cBoxSize, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(btnFigura, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(txtHeridas, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 52, Short.MAX_VALUE)))
                .addGap(35, 35, 35))
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(labelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(labelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelNombre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHeridas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelHeridas))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(btnFigura2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnFigura)
                .addGap(18, 18, 18)
                .addComponent(cBoxSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTablero)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTableroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTableroActionPerformed
        // TODO add your handling code here:
        if(btnTablero.isSelected()){
            if(celdas == null)
                celdas = tablero.getCeldas();
            tablero.setVisible(true);
        } else{
            tablero.setVisible(false);
        }
    }//GEN-LAST:event_btnTableroActionPerformed

    private void cBoxSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBoxSizeActionPerformed
        // TODO add your handling code here:
        switch(this.cBoxSize.getSelectedIndex()){
            case 0:
                tablero.redimensionar('G');
                break;
            case 1:
                tablero.redimensionar('M');
                break;
            case 2:
                tablero.redimensionar('P');
                break;
        }
    }//GEN-LAST:event_cBoxSizeActionPerformed

    private void btnFiguraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiguraActionPerformed
        // TODO add your handling code here:
        btnFigura2.setSelected(false);
    }//GEN-LAST:event_btnFiguraActionPerformed

    private void btnFigura2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFigura2ActionPerformed
        // TODO add your handling code here:
        btnFigura.setSelected(false);
    }//GEN-LAST:event_btnFigura2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnFigura;
    private javax.swing.JToggleButton btnFigura2;
    private javax.swing.JToggleButton btnTablero;
    private javax.swing.JComboBox<String> cBoxSize;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelHeridas;
    private javax.swing.JLabel labelImagen;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtHeridas;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    
    private void buscador(int desplazamiento, Celda celdaInicial, Celda celdaAnterior){
        contador++;
        int indiceY = celdaInicial.getIndiceY();
        int indiceX = celdaInicial.getIndiceX();
        if((celdaInicial.isEmpty()) || celdaAnterior == null){
            celdaInicial.setBorder(bordeMovimiento);
            celdaInicial.setMarcada(true);
            if(desplazamiento!= 0){
                for(int i = indiceY - 1; i <= indiceY + 1; i++){
                    for(int j = indiceX - 1; j <= indiceX + 1; j++){
                        try{
                            if((celdaAnterior == null || !celdaAnterior.equals(celdas[i][j])) &&
                            (celdas[i][j].getIndiceY() == celdaInicial.getIndiceY() || celdas[i][j].getIndiceX() == celdaInicial.getIndiceX())){
                                
                                buscador(desplazamiento-1,celdas[i][j],celdaInicial);
                            }
                         }catch(ArrayIndexOutOfBoundsException aioobe){}
                    }
                }
            }
        } else if(!celdaInicial.isEmpty() && sonEnemigos(celdaInicial,celdaSeleccionada)){
            celdaInicial.setBorder(bordeEnemigo);
            celdaInicial.setMarcada(true);
        } else if(sonEnemigos(celdaInicial,celdaSeleccionada)){
            // por si acaso
        }
    }

    private boolean sonEnemigos(Celda celda1,Celda celda2) {
        return !celda1.getUnidad().getJugador().equals(celda2.getUnidad().getJugador());
    }
    
    private void mueve(Celda origen, Celda destino){
        Unidad unidad = origen.getUnidad();
        origen.quitaUnidad();
        destino.setUnidad(unidad);
        origen.repaint();
        destino.repaint();
    }
    private void liberaEstadoCeldas() {
        celdaSeleccionada = null;
        limpiaDatos();
        for(Celda[] celdasArr : celdas){
            for(Celda celda : celdasArr){
                celda.setSelected(false);
                celda.setMarcada(false);
                celda.setBorder(bordeNormal);
            }
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        Celda celda = (Celda) e.getSource();
        /*System.out.println(
                "¡Clic en celda: ["+celda.getIndiceY()+","+celda.getIndiceX()+"]!"
        );*/
    }

    @Override
    public void mousePressed(MouseEvent e) {
        Celda celda = (Celda) e.getSource();
        /*System.out.println(
                "¡PULSADO: ["+celda.getIndiceY()+","+celda.getIndiceX()+"]!"
        );*/
        
        /*
         * IMPORTANTE - Funciona, pero hay que mejorar las condiciones y refactorizar
         */
        if(SwingUtilities.isLeftMouseButton(e)){
            manejaClicIzquierdo(celda);
        }
        else if(SwingUtilities.isRightMouseButton(e)){
            if(!celda.isEmpty()){
                liberaEstadoCeldas();
                celda.quitaUnidad();
                celda.repaint();
            }
        }
        else if(SwingUtilities.isMiddleMouseButton(e)){
            liberaEstadoCeldas();
            System.out.println(celda.isEmpty() ? "Esta vacia" : "Tiene figura");
        }
    }
    /*
    private void manejaClicIzquierdo(Celda celda) {
        if(this.btnFigura.isSelected()){
            cuentaUnidad++;
            unidadTemp = new Unidad("Jinete Huargo"+cuentaUnidad,3,2,2,2,3,j1,"Caballeria");
            unidadTemp.setMovimientos(5);
            unidadTemp.setImagen("./imagenes/mal/jinete_huargo.jpg");
            celda.setUnidad(unidadTemp);
        } else if(this.btnFigura2.isSelected()){
            cuentaUnidad++;
            unidadTemp = new Unidad("Jefe Troll"+cuentaUnidad,3,2,2,2,3,j2,"Monstruo");
            unidadTemp.setMovimientos(3);
            unidadTemp.setImagen("./imagenes/mal/jefetroll.jpg");
            celda.setUnidad(unidadTemp);
        }
        else if(!celda.isEmpty() && !haySeleccionada() && unidadEsJugadorActual(celda) ){
            liberaEstadoCeldas();
            actualizaDatosSelec(celda);
            buscaMovimientos(celda.getUnidad().getMovimientos(),celda);
            celda.setBorder(bordeSelec);
        } else if(haySeleccionada() && (!celdaSeleccionada.equals(celda)) ){
            if(celda.isEmpty() && celda.isMarcada()){
                mueve(celdaSeleccionada,celda);
                liberaEstadoCeldas();
                nuevoTurno();
            } else if(sonEnemigos(celda,celdaSeleccionada) && celda.isMarcada()){
                combate(celda);
                nuevoTurno();
            } else if(!sonEnemigos(celda,celdaSeleccionada) && !celda.isMarcada()){
                liberaEstadoCeldas();
                actualizaDatosSelec(celda);
                buscaMovimientos(celda.getUnidad().getMovimientos(),celda);
                celda.setBorder(bordeSelec);
            }
            
        }
        celda.repaint();
    }*/
    
    private void manejaClicIzquierdo(Celda celda) {
        if(this.btnFigura.isSelected()){
            cuentaUnidad++;
            unidadTemp = new Unidad("Jinete Huargo"+cuentaUnidad,3,2,2,2,3,j1,"Caballeria");
            unidadTemp.setMovimientos(5);
            unidadTemp.setImagen("./imagenes/mal/jinete_huargo.jpg");
            celda.setUnidad(unidadTemp);
        } 
        else if(this.btnFigura2.isSelected()){
            cuentaUnidad++;
            unidadTemp = new Unidad("Jefe Troll"+cuentaUnidad,3,2,2,2,3,j2,"Monstruo");
            unidadTemp.setMovimientos(3);
            unidadTemp.setImagen("./imagenes/mal/jefetroll.jpg");
            celda.setUnidad(unidadTemp);
        }
        else if(!haySeleccionada()){
            if(!celda.isEmpty() && unidadEsJugadorActual(celda) ){
                liberaEstadoCeldas();
                actualizaDatosSelec(celda);
                buscaMovimientos(celda.getUnidad().getMovimientos(),celda);
                celda.setBorder(bordeSelec);
            } 
        }
        else if(!celdaSeleccionada.equals(celda)){
            if(celda.isEmpty()){
                if(celda.isMarcada()){
                    mueve(celdaSeleccionada,celda);
                    liberaEstadoCeldas();
                    nuevoTurno();
                }
            } else if(sonEnemigos(celda,celdaSeleccionada) && celda.isMarcada()){
                combate(celda);
                nuevoTurno();
            } else if(!sonEnemigos(celda,celdaSeleccionada)){
                liberaEstadoCeldas();
                actualizaDatosSelec(celda);
                buscaMovimientos(celda.getUnidad().getMovimientos(),celda);
                celda.setBorder(bordeSelec);
            }
        }
        celda.repaint();
    }

    private boolean haySeleccionada() {
        return celdaSeleccionada != null;
    }

    private boolean unidadEsJugadorActual(Celda celda) {
        return celda.getUnidad().getJugador().equals(partida.getJugadorActual());
    }

    private void actualizaDatosSelec(Celda celda) {
        celdaSeleccionada = celda;
        celda.setSelected(true);
        celda.setBorder(bordeSelec);
        txtNombre.setText(celda.getUnidad().getNombre());
        txtHeridas.setText(String.valueOf(celda.getUnidad().getHeridas()));
        //ImageIcon img = celda.getUnidad().getImg();
        labelImagen.setIcon(new ImageIcon(celda.getUnidad().getImagen().getImage().getScaledInstance(labelImagen.getWidth(), labelImagen.getHeight(), Image.SCALE_DEFAULT)));
    }

    private void limpiaDatos() {
        txtNombre.setText("");
        txtHeridas.setText("");
        labelImagen.setIcon(null);
    }
    
    private void combate(Celda celdaAtacada) {
        
        txtArea.append("##Combate##\n");
        Unidad uAtacante = celdaSeleccionada.getUnidad();
        Unidad uDefensora = celdaAtacada.getUnidad();
        Unidad ganadora = Pelea.ataques(uAtacante,  uDefensora);
        //System.out.println("--------------------- SUCEDE COMBATE ---------------------");
        txtArea.append(uAtacante.getNombre()+"("+uAtacante.getJugador().getNombre()+")"+" ataca a "+uDefensora.getNombre()+"("+uDefensora.getJugador().getNombre()+")"+"\n");
        if(ganadora.equals(uAtacante)){
           // System.out.println("GANA ATACANTE");  
            txtArea.append("Gana "+uAtacante.getNombre()+"\n");
            if(uDefensora.getHeridas() <= 0){
                txtArea.append("Muere "+uDefensora.getNombre()+"\n");
                //System.out.println("MUERE DEFENSOR");
            } else{
                retrocede(celdaAtacada);
            }
            mueve(celdaSeleccionada,celdaAtacada);
            this.repaint();
        } else{
            txtArea.append("Gana "+uDefensora.getNombre()+"\n");
            if(uAtacante.getHeridas() <= 0){
                txtArea.append("Muere "+uAtacante.getNombre()+"\n");
                //System.out.println("MUERE ATACANTE");
                celdaSeleccionada.quitaUnidad();
            } else{
                /*
                 * Desarrollar método que calcule donde debe quedar el atacante
                 + cuando pierde el combate
                 */
                // TODO calculaMovimiento();
            }
            System.out.println("GANA DEFENSOR");
        }
        //System.out.println("---ATACANTE---\n##########\n"+uAtacante+"\n##########");
        //System.out.println("---DEFENSOR---\n##########\n"+uDefensora+"\n##########");
        //System.out.println("--------------------- TERMINA COMBATE ---------------------");
        this.repaint();
        liberaEstadoCeldas();
        //System.out.println(celdaSeleccionada.getUnidad().equals(celda.getUnidad()));
    }

    private void retrocede(Celda celdaAtacada) {
        try{
            Celda celdaAnterior = celdas[celdaAtacada.getIndiceY()-1][celdaAtacada.getIndiceX()];
            if(celdaAnterior.isEmpty()){
                celdaAnterior.setUnidad(celdaAtacada.getUnidad());
                celdaAnterior.repaint();
            } else{  
                retrocede(celdaAnterior);
                mueve(celdaAtacada,celdaAnterior);
            }
        }catch (ArrayIndexOutOfBoundsException aioobe){
            celdaAtacada.quitaUnidad();
        }
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        Celda celda = (Celda) e.getSource();
        /*System.out.println(
                "¡SOLTADO: ["+celda.getIndiceY()+","+celda.getIndiceX()+"]!"
        );*/
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        Celda celda = (Celda) e.getSource();
        if(!celda.isSelected() && !celda.isMarcada()){
            celda.setBorder(bordeRaton);
            
        }
        // BLOQUE DE PRUEBA DE RENDIMIENTO DEL METODO DE BUSQUEDA
        /*
        liberaEstadoCeldas();
        celda.setSelected(true);
        buscaMovimientos(1,celda);
        celda.setBorder(BorderFactory.createLineBorder(Color.BLUE,3));
        */
        celda.oscurece();
        /*System.out.println(
                "¡El puntero entra en la celda: ["+celda.getIndiceY()+","+celda.getIndiceX()+"]!"
        );*/
    }

    @Override
    public void mouseExited(MouseEvent e) {
        Celda celda = (Celda) e.getSource(); 
        if(!celda.isSelected() && !celda.isMarcada()){
            celda.setBorder(bordeNormal);
        }
        celda.aclara();
    }
}
